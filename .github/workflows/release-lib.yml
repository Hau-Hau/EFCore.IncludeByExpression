name: Release lib

on:
  workflow_dispatch:
    inputs:
      # Property 'dotnet' has been generated by pipeline. Do not edit manually.
      dotnet:
        required: true
        type: choice
        options:
          - net9.0
          - net8.0
      dry-run:
        required: true
        type: boolean
        default: false

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      module: ${{ steps.validate.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-git
        with:
          branch: release/EFCore.IncludeByExpression/${{ inputs.dotnet }}
  
      - name: Validate
        id: validate
        run: |
          IFS=',' read -r -a username_array <<< "${{ secrets.ACCEPT_RELEASE_PR_ALLOW_LIST }}"
          user_found=false
          for username in "${username_array[@]}"
          do
              if [ "$username" == "${{ github.actor }}" ]; then
                  user_found=true
                  break
              fi
          done
          if [ "$user_found" = "false" ]; then
            echo "User ${{ github.actor }} is not authorized to execute this workflow."
            echo "result=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          version=$(sed -n 's:.*<PackageVersion>\(.*\)</PackageVersion>.*:\1:p' ./EFCore.IncludeByExpression/EFCore.IncludeByExpression.csproj)
          version_of_last_release=$(git tag -l "EFCore.IncludeByExpression/*" | sort -V | tail -n 1 | sed 's/EFCore.IncludeByExpression\///')
          if [[ "$version" == "$version_of_last_release" ]]; then
            echo "Version in EFCore.IncludeByExpression.csproj is same as version of last release. Please update the csproj file before proceeding with the release."
            echo "result=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ "$(printf '%s\n' "$version" "$version_of_last_release" | sort -V | tail -n 1 | xargs)" != "$version" ]]; then
            echo "Version in EFCore.IncludeByExpression.csproj is lower than or equal to the version of the last release. Please update the csproj file with a higher version."
            echo "result=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "result=true" >> $GITHUB_OUTPUT

  release:
    needs: [validate]
    if: needs.validate.outputs.module == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-dotnet
      
      - uses: ./.github/actions/setup-git
        with:
          branch: release/EFCore.IncludeByExpression/${{ inputs.dotnet }}

      - uses: ./.github/actions/deploy
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          solution: ./EFCore.IncludeByExpression.sln
          project: EFCore.IncludeByExpression
          dry-run: ${{ inputs.dry-run }}

  tag:
    needs: [release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-dotnet
      
      - uses: ./.github/actions/setup-git
        with:
          branch: release/EFCore.IncludeByExpression/${{ inputs.dotnet }}

      - name: Tag
        shell: bash
        run: |
          version=$(sed -n 's:.*<PackageVersion>\(.*\)</PackageVersion>.*:\1:p' ./EFCore.IncludeByExpression/EFCore.IncludeByExpression.csproj)
          hash=$(sed -n 's:.*commit="\([^"]*\)".*:\1:p' ./EFCore.IncludeByExpression/EFCore.IncludeByExpression.csproj)
 
          if [[ "${{ inputs.dry-run }}" == "true" ]]; then
            echo "git tag -a \"EFCore.IncludeByExpression/$version\" -m \"EFCore.IncludeByExpression v$version\" $hash"
            echo "git push origin tag \"EFCore.IncludeByExpression/$version\""
          else
            git tag -a "EFCore.IncludeByExpression/$version" -m "EFCore.IncludeByExpression v$version" $hash
            git push origin tag "EFCore.IncludeByExpression/$version"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
