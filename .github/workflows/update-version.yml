name: Update versions

on:
  # Do not edit. Section is edited by pipeline.
  workflow_dispatch:
    inputs:
      force:
        required: true
        type: boolean
        default: false
      branch:
        required: true
        type: choice
        options:
          - release/EFCore.IncludeByExpression.Abstractions
          - release/EFCore.IncludeByExpression/net9.0
          - release/EFCore.IncludeByExpression/net8.0
  # Do not edit. Section is edited by pipeline.
  pull_request:
    types: 
      - closed
    branches:
      - release/EFCore.IncludeByExpression.Abstractions
      - release/EFCore.IncludeByExpression/net9.0
      - release/EFCore.IncludeByExpression/net8.0

concurrency:
  group: update-versions
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      PULL_REQUEST_MERGED: ${{ github.event.pull_request.merged }}
    outputs:
      result: ${{ steps.validate.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate
        id: validate
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          is_recurring_call="$([[ "$GITHUB_HEAD_REF" =~ ^bot\/[^\/]+\/update-version$ ]] && echo true || echo false)"
          if [[ "$is_recurring_call" == "true" ]]; then
            echo "result=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          is_merged="$([[ "$PULL_REQUEST_MERGED" == "true" ]] && echo true || echo false)"
          if [[ "$is_merged" == "false" ]]; then
            echo "result=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          is_targeting_trunk="$([[ "$GITHUB_BASE_REF" == "main" ]] && echo true || echo false)"
          is_targeting_release="$([[ "$GITHUB_BASE_REF" =~ ^release\/[^\/]+$ ]] && echo true || echo false)"
          if [[ "$is_targeting_trunk" == "false" || "$is_targeting_release" == "false" ]]; then
            echo "result=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "result=true" >> $GITHUB_OUTPUT

  can-bump-version-lib:
    needs: [validate]
    if: needs.validate.outputs.result == 'true'
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.finalize.outputs.value }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ github.base_ref || inputs.branch }}
          hard-reset: ${{ github.base_ref || inputs.branch }}

      - uses: ./.github/actions/has-changes
        id: has-changes-lib
        with:
          project: EFCore.IncludeByExpression

      - name: Finalize
        id: finalize
        shell: pwsh
        run: |
          $csProjPath = "$([IO.Path]::Combine(".", "EFCore.IncludeByExpression", "EFCore.IncludeByExpression.csproj"))"
          $csprojXml = New-Object System.Xml.XmlDocument
          $csprojXml.PreserveWhitespace = $true
          $csprojXml.Load($csProjPath)          
          $packageVersion = $null
          $propertyGroups = $csprojXml.SelectNodes("//PropertyGroup")
          foreach ($group in $propertyGroups) {
              $versionNode = $group.SelectSingleNode("PackageVersion")
              if ($versionNode -ne $null) {
                  $packageVersion = $versionNode.InnerText.Trim()
                  break
              }
          }

          if ([string]::IsNullOrWhiteSpace($packageVersion)) {
              Write-Host "PackageVersion is empty or not found"
              "value=false" >> $env:GITHUB_OUTPUT
              exit 0
          }          
          "value=${{ steps.has-changes-lib.outputs.result || inputs.force == true }}" >> $env:GITHUB_OUTPUT
  
  can-bump-version-abstractions:
    needs: [validate]
    if: needs.validate.outputs.result == 'true'
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.finalize.outputs.value }}
      
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ github.base_ref || inputs.branch }}
          hard-reset: ${{ github.base_ref || inputs.branch }}

      - uses: ./.github/actions/has-changes
        id: has-changes-abstractions
        with:
          project: EFCore.IncludeByExpression.Abstractions

      - name: Finalize
        id: finalize
        shell: pwsh
        run: |
          $csProjPath = "$([IO.Path]::Combine(".", "EFCore.IncludeByExpression.Abstractions", "EFCore.IncludeByExpression.Abstractions.csproj"))"
          $csprojXml = New-Object System.Xml.XmlDocument
          $csprojXml.PreserveWhitespace = $true
          $csprojXml.Load($csProjPath)          
          $packageVersion = $null
          $propertyGroups = $csprojXml.SelectNodes("//PropertyGroup")
          foreach ($group in $propertyGroups) {
              $versionNode = $group.SelectSingleNode("PackageVersion")
              if ($versionNode -ne $null) {
                  $packageVersion = $versionNode.InnerText.Trim()
                  break
              }
          }

          if ([string]::IsNullOrWhiteSpace($packageVersion)) {
              Write-Host "PackageVersion is empty or not found"
              "value=false" >> $env:GITHUB_OUTPUT
              exit 0
          }
          "value=${{ steps.has-changes-abstractions.outputs.result || inputs.force == true }}" >> $env:GITHUB_OUTPUT
  lib:
    needs: [can-bump-version-lib]
    if: needs.can-bump-version-lib.outputs.value == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      project: ${{ steps.set-project-name.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set project name
        id: set-project-name
        run: |
          echo "value=EFCore.IncludeByExpression" >> $GITHUB_OUTPUT
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=bot/${{ steps.set-project-name.outputs.value }}/update-version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: ${{ github.base_ref || inputs.branch }}
      - name: Update csproj
        shell: pwsh
        run: |
          $csProjPath = "$([IO.Path]::Combine(".", "${{ steps.set-project-name.outputs.value }}", "${{ steps.set-project-name.outputs.value }}.csproj"))"
          $csprojXml = [xml](Get-Content $csProjPath)
          $currentVersion = $csprojXml.Project.PropertyGroup.PackageVersion
          $versionSplitted = $currentVersion -split '\.'
          $versionSplitted[2] = ([int]$versionSplitted[2]) + 1
          $newVersion = $versionSplitted -join '.'
          $content = Get-Content -Path $csProjPath -Raw
          $updatedContent = $content -replace '<PackageVersion>.*?</PackageVersion>', "<PackageVersion>$newVersion</PackageVersion>"
          Set-Content -Path $csProjPath -Value $updatedContent
      - uses: ./.github/actions/commit-changes
        with:
          message: Update ${{ steps.set-project-name.outputs.value }}.csproj
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - uses: ./.github/actions/put-pull-request
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          title: Update ${{ steps.set-project-name.outputs.value }}.csproj
          body: This PR updates the  ${{ steps.set-project-name.outputs.value }}.csproj file to ensure correct project dependencies, metadata, or versioning. Please review the changes for accuracy and compliance.
          from: ${{ steps.set-branch-name.outputs.value }}
          into: ${{ github.base_ref || inputs.branch }}

  abstractions:
    needs: [can-bump-version-abstractions]
    if: needs.can-bump-version-abstractions.outputs.value == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      project: ${{ steps.set-project-name.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set project name
        id: set-project-name
        run: |
          echo "value=EFCore.IncludeByExpression.Abstractions" >> $GITHUB_OUTPUT
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=bot/${{ steps.set-project-name.outputs.value }}/update-version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: ${{ github.base_ref || inputs.branch }}
      - name: Update csproj
        shell: pwsh
        run: |
          $csProjPath = "$([IO.Path]::Combine(".", "${{ steps.set-project-name.outputs.value }}", "${{ steps.set-project-name.outputs.value }}.csproj"))"
          $csprojXml = [xml](Get-Content $csProjPath)
          $currentVersion = $csprojXml.Project.PropertyGroup.PackageVersion
          $versionSplitted = $currentVersion -split '\.'
          $versionSplitted[2] = ([int]$versionSplitted[2]) + 1
          $newVersion = $versionSplitted -join '.'
          $content = Get-Content -Path $csProjPath -Raw
          $updatedContent = $content -replace '<PackageVersion>.*?</PackageVersion>', "<PackageVersion>$newVersion</PackageVersion>"
          Set-Content -Path $csProjPath -Value $updatedContent
      - uses: ./.github/actions/commit-changes
        with:
          message: Update ${{ steps.set-project-name.outputs.value }}.csproj
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - uses: ./.github/actions/put-pull-request
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          title: Update ${{ steps.set-project-name.outputs.value }}.csproj
          body: This PR updates the  ${{ steps.set-project-name.outputs.value }}.csproj file to ensure correct project dependencies, metadata, or versioning. Please review the changes for accuracy and compliance.
          from: ${{ steps.set-branch-name.outputs.value }}
          into: ${{ github.base_ref || inputs.branch }}
