name: Update supported EFCore version

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * MON'

concurrency:
  group: update-dotnet-version
  cancel-in-progress: true

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      active-dotnet-version: ${{ steps.active-dotnet-version.outputs.value }}
      active-entityframeworkcore-versions: ${{ steps.active-entityframeworkcore-versions.outputs.value }}
      highest-dotnet-version: ${{ steps.highest-dotnet-version.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=bot/update-dotnet-version" >> $GITHUB_OUTPUT
      - name: Get active .NET versions
        id: active-dotnet-version
        shell: pwsh
        run: |
          $activeVersions = ((((Invoke-WebRequest -Uri "https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json" -UseBasicParsing | ConvertFrom-Json)."releases-index" | Where-Object { $_."product" -eq ".NET" -and $_."support-phase" -eq "active" | Sort-Object -Property channel-version -Descending } | Select -Property channel-version)."channel-version") -split "," | ForEach-Object { "net$_" }) -join ","
          if ([string]::IsNullOrWhitespace($activeVersions)) {
            exit 1
          }
          "value=$($activeVersions)" >> $env:GITHUB_OUTPUT
          exit 0
      - name: Get active entityframeworkcore versions
        id: active-entityframeworkcore-versions
        shell: pwsh
        run: |
          $versionString = "${{ steps.active-dotnet-version }}"
          $majorVersions = $versionString -split ',' | ForEach-Object { ($_ -replace '.\d+$', '') }
          $efCoreVersions = (Invoke-WebRequest -Uri "https://api.nuget.org/v3-flatcontainer/microsoft.entityframeworkcore/index.json" -UseBasicParsing | ConvertFrom-Json).versions

          $activeEfCoreVersions = @()
          foreach ($majorDotnetVersion in $majorVersions) {
            $efCoreVersion = $efCoreVersions | Where-Object { $_.StartsWith($majorDotnetVersion) -and $_ -match "^\d+.\d+.\d+$" } | Select-Object -Last 1
            if ([string]::IsNullOrWhitespace($activeVersions)) {
              continue
            }

            $activeEfCoreVersions = $activeEfCoreVersions + @($efCoreVersion)
          }

          "value=$($activeEfCoreVersions -join ",")" >> $env:GITHUB_OUTPUT
      - name: Get highest supported dotnet version
        id: highest-dotnet-version
        shell: pwsh
        run: |
          $efCoreVersionsString = "${{ steps.active-entityframeworkcore-versions.outputs.value }}"
          $highestEfCoreVersion = "$($efCoreVersionsString -split ',' | ForEach-Object { [Version]$_ } | Sort-Object -Descending | Select-Object -First 1)"
          $highestDotNetVersion = ([xml](Invoke-WebRequest -Uri "https://api.nuget.org/v3-flatcontainer/microsoft.entityframeworkcore/$($highestEfCoreVersion)/microsoft.entityframeworkcore.nuspec" -UseBasicParsing).Content).package.metadata.dependencies.group.targetFramework
          "value=$($highestDotNetVersion)" >> $env:GITHUB_OUTPUT
      - name: "Reset branches"
        run: |
           BRANCHES=(
             "${{ steps.set-branch-name.outputs.value }}"
             "${{ steps.set-branch-name.outputs.value }}/partial/EFCore.IncludeByExpression"
             "${{ steps.set-branch-name.outputs.value }}/partial/pipelines"
           )
           for BRANCH in "${BRANCHES[@]}"; do
             is_branch_exists_origin=$(git ls-remote --heads origin $BRANCH | grep -q "refs/heads/$BRANCH" && echo true || echo false)
             if [[ "$is_branch_exists_origin" == "true" ]]; then
               git push origin --delete $BRANCH || { echo "Failed to delete branch $BRANCH on origin."; exit 1; }
             fi
           done

  should-updated-targetframeworks:
    needs: [init]
    runs-on: ubuntu-latest
    outputs:
      lib: ${{ steps.finalize.outputs.lib }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/can-update-targetframeworks
        id: lib
        with:
          project: EFCore.IncludeByExpression
          target-dotnet-versions: ${{ needs.init.outputs.active-dotnet-version }}
      - name: Finalize
        id: finalize
        run: |
          echo "lib=${{ steps.lib.outputs.result }}" >> $GITHUB_OUTPUT

  update-dotnet-lib:
    needs: [init, should-updated-targetframeworks]
    if: needs.should-updated-targetframeworks.outputs.lib == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      project: ${{ steps.set-project-name.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}
      status: ${{ steps.set-status.outputs.value }}
      target-dotnet-version: ${{ steps.target-dotnet-version.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set project name
        id: set-project-name
        run: |
          echo "value=EFCore.IncludeByExpression" >> $GITHUB_OUTPUT
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=${{ needs.init.outputs.branch }}/partial/${{ steps.set-project-name.outputs.value }}" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-dotnet
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: main
      - uses: ./.github/actions/update-dotnet-version
        with:
          project: ${{ steps.set-project-name.outputs.value }}
          target-dotnet-versions: ${{ needs.init.outputs.highest-dotnet-version.value }}
      - uses: ./.github/actions/update-dotnet-version
        with:
          project: ${{ steps.set-project-name.outputs.value }}.Tests
          target-dotnet-versions: ${{ needs.init.outputs.highest-dotnet-version.value }}
      - name: Update Microsoft.EntityFrameworkCore version in ${{ steps.set-project-name.outputs.value }}
        shell: pwsh
        run: |
          $filePath = "./${{ steps.set-project-name.outputs.value }}/${{ steps.set-project-name.outputs.value }}.csproj"
          $csprojXml = [xml](Get-Content $filePath)
          $efCoreVersionsString = "${{ steps.active-entityframeworkcore-versions.outputs.value }}"
          $highestEfCoreVersion = "$($efCoreVersionsString -split ',' | ForEach-Object { [Version]$_ } | Sort-Object -Descending | Select-Object -First 1)"
          ($csprojXml.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq "Microsoft.EntityFrameworkCore" }).version = $highestEfCoreVersion
          $csprojXml.Save($filePath)
      - name: Update Microsoft.EntityFrameworkCore version in ${{ steps.set-project-name.outputs.value }}.Tests
        shell: pwsh
        run: |
          $filePath = "./${{ steps.set-project-name.outputs.value }}.Tests/${{ steps.set-project-name.outputs.value }}.Tests.csproj"
          $csprojXml = [xml](Get-Content $filePath)
          $efCoreVersionsString = "${{ steps.active-entityframeworkcore-versions.outputs.value }}"
          $highestEfCoreVersion = "$($efCoreVersionsString -split ',' | ForEach-Object { [Version]$_ } | Sort-Object -Descending | Select-Object -First 1)"
          ($csprojXml.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq "Microsoft.EntityFrameworkCore" }).version = $highestEfCoreVersion
          $csprojXml.Save($filePath)
      - name: Update Microsoft.EntityFrameworkCore version in ${{ steps.set-project-name.outputs.value }}.Tests
        shell: pwsh
        run: |
          $filePath = "./${{ steps.set-project-name.outputs.value }}.Tests/${{ steps.set-project-name.outputs.value }}.Tests.csproj"
          $csprojXml = [xml](Get-Content $filePath)
          $efCoreVersionsString = "${{ steps.active-entityframeworkcore-versions.outputs.value }}"
          $highestEfCoreVersion = "$($efCoreVersionsString -split ',' | ForEach-Object { [Version]$_ } | Sort-Object -Descending | Select-Object -First 1)"
          ($csprojXml.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq "Microsoft.EntityFrameworkCore" }).version = $highestEfCoreVersion
          $csprojXml.Save($filePath)
      - name: Update Microsoft.EntityFrameworkCore.Design version in ${{ steps.set-project-name.outputs.value }}.Tests
        shell: pwsh
        run: |
          $filePath = "./${{ steps.set-project-name.outputs.value }}.Tests/${{ steps.set-project-name.outputs.value }}.Tests.csproj"
          $csprojXml = [xml](Get-Content $filePath)
          $packageName = "Microsoft.EntityFrameworkCore.Design"
          $highestPackageVersion = "$((Invoke-WebRequest -Uri "https://api.nuget.org/v3-flatcontainer/$($packageName.ToLower())/index.json" -UseBasicParsing | ConvertFrom-Json).versions | Where-Object { $_ -match "^\d+.\d+.\d+$" } | ForEach-Object { [Version]$_ } | Sort-Object -Descending | Select-Object -First 1)"
          ($csprojXml.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq $packageName }).version = $highestPackageVersion
          $csprojXml.Save($filePath)
      - name: Update Microsoft.EntityFrameworkCore.InMemory version in ${{ steps.set-project-name.outputs.value }}.Tests
        shell: pwsh
        run: |
          $filePath = "./${{ steps.set-project-name.outputs.value }}.Tests/${{ steps.set-project-name.outputs.value }}.Tests.csproj"
          $csprojXml = [xml](Get-Content $filePath)
          $packageName = "Microsoft.EntityFrameworkCore.InMemory"
          $highestPackageVersion = "$((Invoke-WebRequest -Uri "https://api.nuget.org/v3-flatcontainer/$($packageName.ToLower())/index.json" -UseBasicParsing | ConvertFrom-Json).versions | Where-Object { $_ -match "^\d+.\d+.\d+$" } | ForEach-Object { [Version]$_ } | Sort-Object -Descending | Select-Object -First 1)"
          ($xml.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq $packageName }).version = $highestPackageVersion
          $xml.Save($filePath)
      - name: Update Microsoft.EntityFrameworkCore.Relational version in ${{ steps.set-project-name.outputs.value }}.Tests
        shell: pwsh
        run: |
          $filePath = "./${{ steps.set-project-name.outputs.value }}.Tests/${{ steps.set-project-name.outputs.value }}.Tests.csproj"
          $csprojXml = [xml](Get-Content $filePath)
          $packageName = "Microsoft.EntityFrameworkCore.Relational"
          $highestPackageVersion = "$((Invoke-WebRequest -Uri "https://api.nuget.org/v3-flatcontainer/$($packageName.ToLower())/index.json" -UseBasicParsing | ConvertFrom-Json).versions | Where-Object { $_ -match "^\d+.\d+.\d+$" } | ForEach-Object { [Version]$_ } | Sort-Object -Descending | Select-Object -First 1)"
          ($xml.Project.ItemGroup.PackageReference | Where-Object { $_.Include -eq $packageName }).version = $highestPackageVersion
          $xml.Save($filePath)
      - uses: ./.github/actions/commit-changes
        with:
          message: Update .NET version in ${{ steps.set-project-name.outputs.value }}
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - name: Set status
        id: set-status
        run: |
          echo "value=true" >> $GITHUB_OUTPUT

  status-tracker-lib:
    needs: [update-dotnet-lib]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      completed: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          echo "value=${{needs.update-dotnet-lib.outputs.status || 'false'}}" >> $GITHUB_OUTPUT
  
  update-pipelines:
    needs: [init, should-updated-targetframeworks]
    if: needs.should-updated-targetframeworks.outputs.lib == 'true'
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    outputs:
      branch: ${{ steps.set-branch-name.outputs.value }}
      status: ${{ steps.set-status.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=${{ needs.init.outputs.branch }}/partial/pipelines" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: main
      - name: Update setup-dotnet/action.yml action
        shell: pwsh
        run: |
          $efCoreVersionsString = "${{ needs.init.outputs.active-entityframeworkcore-versions.value }}"
          $efCoreVersions = @($efCoreVersionsString -split ',')
          
          $dotnetVersions = @()
          foreach ($efCoreVersion in $efCoreVersions) {
            $dotnetVersion = ([xml](Invoke-WebRequest -Uri "https://api.nuget.org/v3-flatcontainer/microsoft.entityframeworkcore/$($efCoreVersion)/microsoft.entityframeworkcore.nuspec" -UseBasicParsing).Content).package.metadata.dependencies.group.targetFramework
            $dotnetVersions = $dotnetVersions + @($dotnetVersion)
          }
          $dotnetVersions = @($dotnetVersions | Select-Object -Unique)

          $filePath = "./.github/actions/setup-dotnet/action.yml"
          $versions = $dotnetVersions | ForEach-Object { ($_ -replace 'net', '') + ".x" }
          $yamlContent = Get-Content $filePath -Raw
          $dotnetVersionPattern = "(?sm)dotnet-version:\s*\|.*?(?=\w+:|\z)"
          $indentation = if ($yamlContent -match "([ \t]*)dotnet-version: \|") { "$($matches[1])  " } else { "" }
          $newDotnetVersionSection = "dotnet-version: |`r`n${indentation}" + ($versions | ForEach-Object { "${indentation}$_" } | Out-String).Trim()
          $updatedYamlContent = $yamlContent -replace $dotnetVersionPattern, $newDotnetVersionSection
          Set-Content $filePath -Value $updatedYamlContent
      - name: Update release-lib.yml workflow
        shell: pwsh
        run: |
          $filePath = "./.github/workflows/release-lib.yml"
          $libVersions = @("${{ needs.init.outputs.active-entityframeworkcore-versions }}" -split ',') | ForEach-Object { ($_ -replace '\d+$', 'x') }
          $yamlContent = Get-Content $filePath -Raw
          $newOptionsString = "`n          - release/EFCore.IncludeByExpression/" + ($libVersions -join "`n          - release/EFCore.IncludeByExpression/")
          $pattern = '(?ms)(dotnet:\s+required:\s+true\s+type:\s+choice\s+options:)(\s+- [0-9.]+)+(?=\s+\w+:|\s*$)'
          $replacement = "`$1$newOptionsString"
          $updatedContent = $yamlContent -replace $pattern, $replacement
          $updatedContent | Set-Content -Path $filePath -NoNewline
      # - name: Update tests.yml workflow
      #   shell: pwsh
      #   run: |
      #     $filePath = "./.github/workflows/tests.yml"
      #     $versionString = "${{ needs.init.outputs.active-dotnet-version }}"
      #     $newOptions = @("main") + @($versionString -split ',' | ForEach-Object { ($_ -replace 'net', 'release/EFCore.IncludeByExpression/net') }) + @("release/EFCore.IncludeByExpression.Abstractions")
      #     $yamlContent = Get-Content $filePath -Raw
      #     $newBranchesString = "`n      - " + ($newOptions -join "`n      - ")
      #     $pattern = '(?ms)(push:\s+branches:)(\s+- [^\n]+)+(?=\s+\w+:|\s*$)'
      #     $replacement = "`$1$newBranchesString"
      #     $updatedContent = $yamlContent -replace $pattern, $replacement
      #     $updatedContent | Set-Content -Path $filePath -NoNewline
      - name: Update coverage.yml workflow
        shell: pwsh
        run: |
          $filePath = "./.github/workflows/coverage.yml"
          $highestDotNetVersion = "${{ needs.init.outputs.highest-dotnet-version.value }}"
          $content = Get-Content -Path $filePath -Raw
          $content = $content -replace 'DOTNET_VERSION: (\d+\.\d+\.x)', "DOTNET_VERSION: $($highestDotNetVersion).x"
          $content = $content -replace '--framework net\d+\.\d+', "--framework $highestDotNetVersion"
          $content = $content -replace 'coverage\.net\d+\.\d+\.info', "coverage.$highestDotNetVersion.info"
          $content | Set-Content -Path $filePath -NoNewline
      - name: Update update-version-lib.yml workflow
        shell: pwsh
        run: |
          $filePath = "./.github/workflows/update-version-lib.yml"
          $libVersions = @("${{ needs.init.outputs.active-entityframeworkcore-versions }}" -split ',') | ForEach-Object { ($_ -replace '\d+$', 'x') }
          $newOptions = @($libVersions | ForEach-Object { 'release/EFCore.IncludeByExpression/$($_)') })
          $yamlContent = Get-Content $filePath -Raw
           
          $newBranchesString = "`n          - " + ($newOptions -join "`n          - ")
          $newPRBranchesString = "`n      - " + ($newOptions -join "`n      - ")
          
          $optionsPattern = '(?ms)(branch:\s+required:\s+true\s+type:\s+choice\s+options:)(\s+- [^\n]+)+(?=\s+\w+:|\s*$)'
          $optionsReplacement = "`$1$newBranchesString"
          $updatedContent = $yamlContent -replace $optionsPattern, $optionsReplacement
          
          $branchesPattern = '(?ms)(pull_request:\s+types:\s+- closed\s+branches:)(\s+- [^\n]+)+(?=\s+\w+:|\s*$)'
          $branchesReplacement = "`$1$newPRBranchesString"
          $updatedContent = $updatedContent -replace $branchesPattern, $branchesReplacement

          $updatedContent | Set-Content -Path $filePath -NoNewline
      - name: Regenerate dependabot.yml
        shell: pwsh
        run: |
          $filePath = "./.github/dependabot.yml"
          $libVersions = @("${{ needs.init.outputs.active-entityframeworkcore-versions }}" -split ',') | ForEach-Object { ($_ -replace '\d+$', 'x') }
          $baseYaml = @(
              "#------------------------------------------------------------------------------",
              "# This code was generated by update-dotnet-version.yml pipeline.",
              "# Changes to this file will be lost if the code is regenerated.",
              "#------------------------------------------------------------------------------",
              "version: 2",
              "updates:",
              "  - package-ecosystem: nuget",
              "    directory: `"/`"",
              "    schedule:",
              "      interval: daily",
              "  - package-ecosystem: nuget",
              "    target-branch: release/EFCore.IncludeByExpression.Abstractions",
              "    directory: `"/EFCore.IncludeByExpression.Abstractions/`"",
              "    schedule:",
              "      interval: daily"
          )
          $baseYaml | Out-File -FilePath $filePath -Encoding utf8
          foreach ($libVersion in $libVersions) {
              $additionalEntry = @(
                  "  - package-ecosystem: nuget",
                  "    target-branch: release/EFCore.IncludeByExpression/$libVersion",
                  "    directories:",
                  "      - `"/EFCore.IncludeByExpression/`"",
                  "      - `"/EFCore.IncludeByExpression.Tests/`"",
                  "    schedule:",
                  "      interval: daily"
                  "    ignore:"
                  "      - dependency-name: Microsoft.EntityFrameworkCore"
                  "        update-types: [`"version-update:semver-major`", `"version-update:semver-minor`"]"
                  "      - dependency-name: Microsoft.EntityFrameworkCore.Design"
                  "        update-types: [`"version-update:semver-major`", `"version-update:semver-minor`"]"
                  "      - dependency-name: Microsoft.EntityFrameworkCore.InMemory"
                  "        update-types: [`"version-update:semver-major`", `"version-update:semver-minor`"]"
                  "      - dependency-name: Microsoft.EntityFrameworkCore.Relational"
                  "        update-types: [`"version-update:semver-major`", `"version-update:semver-minor`"]"
              )
              $additionalEntry | Out-File -FilePath $filePath -Encoding utf8 -Append
          }
      - uses: ./.github/actions/commit-changes
        with:
          message: Update pipelines
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - name: Set status
        id: set-status
        run: |
          echo "value=true" >> $GITHUB_OUTPUT

  status-tracker-pipelines:
    needs: [update-pipelines]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      completed: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          echo "value=${{needs.update-pipelines.outputs.status || 'false'}}" >> $GITHUB_OUTPUT

  collect:
    needs: [
      status-tracker-lib,
      status-tracker-pipelines,
    ]
    if: always() && contains(needs.*.outputs.completed, 'true') 
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          values=(
            '${{ needs.status-tracker-lib.outputs.completed || 'false' }}'
            '${{ needs.status-tracker-pipelines.outputs.completed || 'false' }}'
          )
          result='false'
          for value in "${values[@]}"; do
            if [ "$value" == "true" ]; then
              result='true'
              break
            fi
          done
          echo "value=$result" >> $GITHUB_OUTPUT

  finalize:
    needs: [
        init,
        collect
    ]
    if: always() && needs.collect.outputs.result == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
        - uses: actions/checkout@v4
          with:
            token: ${{ secrets.WORKFLOW_TOKEN }}
        - uses: ./.github/actions/setup-git
          with:
            branch: ${{ needs.init.outputs.branch }}
            hard-reset: main
        - name: Merge
          run: |
           TARGET_BRANCH="${{ needs.init.outputs.branch }}"
           PARTIAL_BRANCHES=(
             "${{ needs.init.outputs.branch }}/partial/EFCore.IncludeByExpression"
             "${{ needs.init.outputs.branch }}/partial/pipelines"
           )
           for BRANCH in "${PARTIAL_BRANCHES[@]}"; do
             is_branch_exists=$(git ls-remote --heads origin $BRANCH | grep -q "refs/heads/$BRANCH" && echo true || echo false)
             if [[ "$is_branch_exists" == "true" ]]; then
               git fetch origin "$BRANCH"
               hash=$(git ls-remote origin "$BRANCH" | cut -f1)
               git rebase "$hash"
               echo "Rebase successful for $BRANCH."
             fi
           done

           for BRANCH in "${PARTIAL_BRANCHES[@]}"; do
             is_branch_exists_origin=$(git ls-remote --heads origin $BRANCH | grep -q "refs/heads/$BRANCH" && echo true || echo false)
             if [[ "$is_branch_exists_origin" == "true" ]]; then           
               echo "Deleting branch $BRANCH on origin..."
               git push origin --delete $BRANCH || { echo "Failed to delete branch $BRANCH on origin. Continuing."; }
             fi 
           done
        - uses: ./.github/actions/push-changes
          with:
            branch: ${{ needs.init.outputs.branch }}
            force: true
        - uses: ./.github/actions/put-pull-request
          with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            title: Update .NET versions
            body: This PR updates .NET version used in project and pipelines.
            from: ${{ needs.init.outputs.branch }}
            into: main
